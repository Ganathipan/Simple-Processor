$date
	Tue Jun 24 23:21:23 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' ZERO_FLAG $end
$var wire 1 ( SIGN_CONTROL $end
$var wire 1 ) REG_WRITE_ENABLE $end
$var wire 32 * PC_OUT [31:0] $end
$var wire 32 + PC_IN [31:0] $end
$var wire 1 , OPERAND_CONTROL $end
$var wire 8 - OPERAND2 [7:0] $end
$var wire 8 . OPERAND1 [7:0] $end
$var wire 1 / JUMP_CONTROL $end
$var wire 2 0 BRANCH_CONTROL [1:0] $end
$var wire 8 1 ALURESULT [7:0] $end
$var wire 3 2 ALUOP [2:0] $end
$var reg 8 3 ALU_IN_DATA1 [7:0] $end
$var reg 8 4 ALU_IN_DATA2 [7:0] $end
$scope module u_alu $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 sum [7:0] $end
$var wire 8 8 shiftOut [7:0] $end
$var wire 8 9 orOut [7:0] $end
$var wire 8 : mulOut [7:0] $end
$var wire 8 ; fwdOut [7:0] $end
$var wire 8 < andOut [7:0] $end
$var wire 1 = SHIFT_E $end
$var wire 1 > MUL_E $end
$var wire 3 ? ALUOP [2:0] $end
$var reg 8 @ RESULT [7:0] $end
$var reg 1 ' ZERO $end
$scope module u0 $end
$var wire 8 A DATA2 [7:0] $end
$var wire 8 B RESULT [7:0] $end
$upscope $end
$scope module u1 $end
$var wire 8 C DATA1 [7:0] $end
$var wire 8 D DATA2 [7:0] $end
$var wire 8 E RESULT [7:0] $end
$upscope $end
$scope module u3 $end
$var wire 8 F DATA1 [7:0] $end
$var wire 8 G DATA2 [7:0] $end
$var wire 8 H RESULT [7:0] $end
$upscope $end
$scope module u4 $end
$var wire 8 I DATA1 [7:0] $end
$var wire 8 J DATA2 [7:0] $end
$var wire 8 K RESULT [7:0] $end
$upscope $end
$scope module u5 $end
$var wire 8 L DATA1 [7:0] $end
$var wire 8 M DATA2 [7:0] $end
$var wire 1 > ENABLE $end
$var reg 8 N RESULT [7:0] $end
$var reg 16 O temp1 [15:0] $end
$var reg 16 P temp2 [15:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module u6 $end
$var wire 8 R DATA1 [7:0] $end
$var wire 8 S DATA2 [7:0] $end
$var wire 1 = ENABLE $end
$var reg 8 T RESULT [7:0] $end
$var reg 1 U sign $end
$var integer 32 V i [31:0] $end
$upscope $end
$upscope $end
$scope module u_control $end
$var wire 8 W OPCODE [7:0] $end
$var reg 3 X ALUOP [2:0] $end
$var reg 2 Y BRANCH_CONTROL [1:0] $end
$var reg 1 / JUMP_CONTROL $end
$var reg 1 , OPERAND_CONTROL $end
$var reg 1 ( SIGN_CONTROL $end
$var reg 1 ) WRITE_ENABLE $end
$upscope $end
$scope module u_pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 Z PC_IN [31:0] $end
$var reg 32 [ PC_OUT [31:0] $end
$upscope $end
$scope module u_pcIn $end
$var wire 2 \ BRANCH [1:0] $end
$var wire 8 ] BRANCH_ADDRESS [7:0] $end
$var wire 1 / JUMP $end
$var wire 32 ^ PC_IN [31:0] $end
$var wire 1 ' ZERO $end
$var reg 32 _ PC [31:0] $end
$var reg 32 ` PC_OUT [31:0] $end
$var reg 32 a offset [31:0] $end
$upscope $end
$scope module u_regfile $end
$var wire 1 " CLK $end
$var wire 3 b INADDRESS [2:0] $end
$var wire 8 c INDATA [7:0] $end
$var wire 3 d OUT1ADDRESS [2:0] $end
$var wire 3 e OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ) WRITE $end
$var reg 8 f OUT1DATA [7:0] $end
$var reg 8 g OUT2DATA [7:0] $end
$var integer 32 h counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 i \reg_array[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 j \reg_array[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 k \reg_array[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 l \reg_array[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 m \reg_array[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 n \reg_array[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 o \reg_array[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module u_regfile $end
$var reg 8 p \reg_array[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
b0 c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
b0 T
bx S
bx R
b1000 Q
bx00000000 P
b0 O
b0 N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
b0 @
bx ?
x>
x=
bx <
bx ;
b0 :
bx 9
b0 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b0 1
bx 0
x/
bx .
bx -
x,
bx +
bx *
x)
x(
x'
bx &
bx %
1$
bx #
0"
bx !
$end
#1
b0 !
b0 *
b0 [
b0 ^
#2
b100 _
#3
bx :
bx N
bx O
b1000 Q
bx00000000 P
b11 4
b11 6
b11 A
b11 D
b11 G
b11 J
b11 M
b11 S
b100 +
b100 Z
b100 `
1)
1,
0(
0/
b0 0
b0 Y
b0 \
b1 ]
b0 W
b1 b
b0 d
b11 e
b11000000000000000100000000 #
b11000000000000000100000000 &
#4
b0 :
b0 N
b1000 Q
bx00000000 P
bx O
0>
0=
b11 1
b11 @
b11 c
b0 2
b0 ?
b0 X
b0xx <
b0xx H
bx11 9
bx11 K
b11 ;
b11 B
#5
b1000 a
#6
b1000 h
1"
#7
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
#9
b1000 Q
b0 P
b0 O
b0 3
b0 5
b0 C
b0 F
b0 I
b0 L
b0 R
b0 -
b0 g
b0 .
b0 f
#10
b0 <
b0 H
b11 9
b11 K
#11
0'
b11 7
b11 E
#12
0"
#18
b0 %
0$
1"
#19
b100 !
b100 *
b100 [
b100 ^
b11 j
#20
b1000 +
b1000 Z
b1000 `
b1000 _
#21
b1000 Q
b1 4
b1 6
b1 A
b1 D
b1 G
b1 J
b1 M
b1 S
b10 ]
b10 b
b1 e
b1000000000000001000000000 #
b1000000000000001000000000 &
#22
b1100 a
b1 1
b1 @
b1 c
b1 9
b1 K
b1 ;
b1 B
#23
b10000 a
b11 -
b11 g
b1 7
b1 E
#24
0"
#30
b1 %
1"
#31
b1000 !
b1000 *
b1000 [
b1000 ^
b1 k
#32
b1100 +
b1100 Z
b1100 `
b1100 _
#33
b1000 Q
b10000 +
b10000 Z
b10000 `
0)
0,
1(
b10 0
b10 Y
b10 \
b10 4
b10 6
b10 A
b10 D
b10 G
b10 J
b10 M
b10 S
b1 ]
b1110 W
b1 b
b1 d
b10 e
b10000000010000000100001110 #
b10000000010000000100001110 &
#34
b10100 +
b10100 Z
b10100 `
b10100 a
b10 1
b10 @
b10 c
b10 9
b10 K
b10 ;
b10 B
#35
b1011110111 O
b1000 Q
b1100000000 P
b10000 +
b10000 Z
b10000 `
b11 3
b11 5
b11 C
b11 F
b11 I
b11 L
b11 R
b11111101 4
b11111101 6
b11111101 A
b11111101 D
b11111101 G
b11111101 J
b11111101 M
b11111101 S
b10000 a
b1 -
b1 g
b11 .
b11 f
b10 7
b10 E
#36
b11111101 1
b11111101 @
b11111101 c
b1 <
b1 H
b11111111 9
b11111111 K
b11111101 ;
b11111101 B
0"
#37
b1000 Q
b1100000000 P
b1011111101 O
b11111111 4
b11111111 6
b11111111 A
b11111111 D
b11111111 G
b11111111 J
b11111111 M
b11111111 S
b1100 +
b1100 Z
b1100 `
1'
b0 7
b0 E
#38
b11111111 1
b11111111 @
b11111111 c
b11 <
b11 H
b11111111 ;
b11111111 B
#39
b10000 +
b10000 Z
b10000 `
0'
b10 7
b10 E
#42
b10 %
1"
#43
b10000 !
b10000 *
b10000 [
b10000 ^
#44
b10100 _
#45
b10100 +
b10100 Z
b10100 `
1)
b0 0
b0 Y
b0 \
b100 ]
b11 W
b100 b
b10000000010000010000000011 #
b10000000010000010000000011 &
#46
b10 1
b10 @
b10 c
b1 2
b1 ?
b1 X
b11000 a
#47
b100100 a
#48
0"
#54
b11 %
1"
#55
b10100 !
b10100 *
b10100 [
b10100 ^
b10 m
#56
b11000 +
b11000 Z
b11000 `
b11000 _
#57
b1000 Q
b1100000000 P
b11 O
b1 4
b1 6
b1 A
b1 D
b1 G
b1 J
b1 M
b1 S
b0xxxx00 +
b0xxxx00 Z
b0xxxx00 `
x)
x,
x(
x/
bx 0
bx Y
bx \
bx ]
bx W
bx b
bx d
bx e
bx #
bx &
#58
b0xx :
b0xx N
b1000 Q
b1100000000 P
b11 O
x>
x=
b0 1
b0 @
b0 c
b0xx1000 +
b0xx1000 Z
b0xx1000 `
bx 2
bx ?
bx X
b101000 a
b1 <
b1 H
b11 9
b11 K
b1 ;
b1 B
#59
bx +
bx Z
bx `
bx 3
bx 5
bx C
bx F
bx I
bx L
bx R
b0 :
b0 N
b1000 Q
bx00000000 P
b0 O
bx a
bx -
bx g
bx .
bx f
bx 4
bx 6
bx A
bx D
bx G
bx J
bx M
bx S
b100 7
b100 E
#60
bx <
bx H
bx 9
bx K
bx ;
bx B
0"
#61
x'
bx 7
bx E
#66
b100 %
1"
#67
bx !
bx *
bx [
bx ^
#68
bx _
#72
0"
#78
b101 %
1"
#84
0"
#90
b110 %
1"
#96
0"
#102
b111 %
1"
#108
0"
#114
b1000 %
1"
#120
0"
#126
b1001 %
1"
#132
0"
#138
b1010 %
1"
#144
0"
#150
b1011 %
1"
#156
0"
#162
b1100 %
1"
#168
0"
#174
b1101 %
1"
#180
0"
#186
b1110 %
1"
#192
0"
#198
b1111 %
1"
#204
0"
#210
b10000 %
1"
#216
0"
#222
b10001 %
1"
#228
0"
#234
b10010 %
1"
#240
0"
#246
b10011 %
1"
#252
0"
#258
b10100 %
1"
#264
0"
#270
b10101 %
1"
#276
0"
#282
b10110 %
1"
#288
0"
#294
b10111 %
1"
#300
0"
#306
b11000 %
1"
#312
0"
#318
b11001 %
1"
#324
0"
#330
b11010 %
1"
#336
0"
#342
b11011 %
1"
#348
0"
#354
b11100 %
1"
#360
0"
#366
b11101 %
1"
#372
0"
#378
b11110 %
1"
#384
0"
#388
