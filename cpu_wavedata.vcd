$date
	Tue Jun 17 21:51:06 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' zeroFlag $end
$var wire 1 ( signControl $end
$var wire 1 ) operandControl $end
$var wire 1 * jumpControl $end
$var wire 2 + branchControl [1:0] $end
$var wire 1 , REG_WRITE_ENABLE $end
$var wire 32 - PC_OUT [31:0] $end
$var wire 32 . PC_IN [31:0] $end
$var wire 8 / OPERAND2 [7:0] $end
$var wire 8 0 OPERAND1 [7:0] $end
$var wire 8 1 ALURESULT [7:0] $end
$var wire 3 2 ALUOP [2:0] $end
$var reg 8 3 alu_data1 [7:0] $end
$var reg 8 4 alu_data2 [7:0] $end
$scope module u_alu $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 sum [7:0] $end
$var wire 8 8 shiftOut [7:0] $end
$var wire 8 9 orOut [7:0] $end
$var wire 8 : mulOut [7:0] $end
$var wire 8 ; fwdOut [7:0] $end
$var wire 1 < enable_shift $end
$var wire 1 = enable_or $end
$var wire 1 > enable_mul $end
$var wire 1 ? enable_fwd $end
$var wire 1 @ enable_and $end
$var wire 1 A enable_add $end
$var wire 8 B andOut [7:0] $end
$var wire 3 C SELECT [2:0] $end
$var reg 8 D RESULT [7:0] $end
$var reg 1 ' ZERO $end
$scope module u0 $end
$var wire 8 E DATA2 [7:0] $end
$var wire 1 ? ENABLE $end
$var wire 8 F RESULT [7:0] $end
$upscope $end
$scope module u1 $end
$var wire 8 G DATA1 [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 1 A ENABLE $end
$var wire 8 I RESULT [7:0] $end
$upscope $end
$scope module u3 $end
$var wire 8 J DATA1 [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$var wire 1 @ ENABLE $end
$var wire 8 L RESULT [7:0] $end
$upscope $end
$scope module u4 $end
$var wire 8 M DATA1 [7:0] $end
$var wire 8 N DATA2 [7:0] $end
$var wire 1 = ENABLE $end
$var wire 8 O RESULT [7:0] $end
$upscope $end
$scope module u5 $end
$var wire 8 P DATA1 [7:0] $end
$var wire 8 Q DATA2 [7:0] $end
$var wire 1 > ENABLE $end
$var reg 8 R RESULT [7:0] $end
$var reg 16 S temp1 [15:0] $end
$var reg 16 T temp2 [15:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module u6 $end
$var wire 8 V DATA1 [7:0] $end
$var wire 8 W DATA2 [7:0] $end
$var wire 1 < ENABLE $end
$var reg 8 X RESULT [7:0] $end
$var reg 1 Y sign $end
$var integer 32 Z i [31:0] $end
$upscope $end
$upscope $end
$scope module u_control $end
$var wire 8 [ opcode [7:0] $end
$var reg 3 \ ALUOP [2:0] $end
$var reg 2 ] branchControl [1:0] $end
$var reg 1 * jumpControl $end
$var reg 1 ) operandControl $end
$var reg 1 ( signControl $end
$var reg 1 , writeEn $end
$upscope $end
$scope module u_pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 ^ pc_in [31:0] $end
$var reg 32 _ pc_out [31:0] $end
$upscope $end
$scope module u_pcIncrementer $end
$var wire 2 ` branch [1:0] $end
$var wire 8 a branchAddress [7:0] $end
$var wire 1 * jump $end
$var wire 32 b pc_in [31:0] $end
$var wire 1 ' zero $end
$var reg 32 c PC [31:0] $end
$var reg 32 d offset [31:0] $end
$var reg 32 e pc_out [31:0] $end
$upscope $end
$scope module u_regfile $end
$var wire 1 " CLK $end
$var wire 8 f IN [7:0] $end
$var wire 3 g INADDRESS [2:0] $end
$var wire 3 h OUT1ADDRESS [2:0] $end
$var wire 3 i OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 , WRITE $end
$var wire 32 j r7 [31:0] $end
$var wire 32 k r6 [31:0] $end
$var wire 32 l r5 [31:0] $end
$var wire 32 m r4 [31:0] $end
$var wire 32 n r3 [31:0] $end
$var wire 32 o r2 [31:0] $end
$var wire 32 p r1 [31:0] $end
$var wire 32 q r0 [31:0] $end
$var reg 8 r OUT1 [7:0] $end
$var reg 8 s OUT2 [7:0] $end
$var integer 32 t counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx t
bx s
bx r
b0xxxxxxxx q
b0xxxxxxxx p
b0xxxxxxxx o
b0xxxxxxxx n
b0xxxxxxxx m
b0xxxxxxxx l
b0xxxxxxxx k
b0xxxxxxxx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
xY
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
x@
x?
x>
x=
x<
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
x*
x)
x(
x'
bx &
bx %
1$
bx #
0"
bx !
$end
#1
b0 !
b0 -
b0 _
b0 b
#2
bx d
b100 c
#3
b0 1
b0 D
b0 f
b0 :
b0 R
b1000 U
b1010 T
b0 S
b0 Z
0Y
b0x0x 8
b0x0x X
b101 3
b101 5
b101 E
b101 G
b101 J
b101 M
b101 P
b101 V
b100 .
b100 ^
b100 e
1,
1)
0(
0*
b0 +
b0 ]
b0 `
b100 g
b0 h
b101 i
b100 a
b0 [
bx d
b101000000000000010000000000 #
b101000000000000010000000000 &
#4
b0 8
b0 X
b1000 U
b1010 T
b0x0x 1
b0x0x D
b0x0x f
0<
0>
0=
0@
0A
1?
b0 2
b0 C
b0 \
bx d
b1000 t
b0x0x B
b0x0x L
b0x0x ;
b0x0x F
1"
#5
bx d
b0 j
b0 k
b0 l
b0 m
b0 n
b0 o
b0 p
b0 q
b101 1
b101 D
b101 f
b0 9
b0 O
b0 B
b0 L
b101 ;
b101 F
#6
bx d
1'
b0 7
b0 I
#7
b1000 U
b1010 T
b0 4
b0 6
b0 H
b0 K
b0 N
b0 Q
b0 W
bx d
b0 /
b0 s
b0 0
b0 r
#8
bx d
0"
#9
bx d
#10
bx d
#11
bx d
#12
bx d
b0 %
0$
1"
#13
bx d
b100 !
b100 -
b100 _
b100 b
b101 m
#14
b1000 .
b1000 ^
b1000 e
bx d
b1000 c
#15
b1000 U
b10010 T
b1001 3
b1001 5
b1001 E
b1001 G
b1001 J
b1001 M
b1001 P
b1001 V
b10 g
b1 i
b10 a
bx d
b1001000000000000001000000000 #
b1001000000000000001000000000 &
#16
bx d
b1001 1
b1001 D
b1001 f
b1001 ;
b1001 F
0"
#17
bx d
#18
bx d
#19
bx d
#20
bx d
b1 %
1"
#21
bx d
b1000 !
b1000 -
b1000 _
b1000 b
b1001 o
#22
b1100 .
b1100 ^
b1100 e
bx d
b1100 c
#23
b1000 U
b0 T
0)
b0 3
b0 5
b0 E
b0 G
b0 J
b0 M
b0 P
b0 V
b110 g
b100 h
b10 i
b110 a
b10 [
bx d
b10000001000000011000000010 #
b10000001000000011000000010 &
#24
1A
0?
b1 2
b1 C
b1 \
bx d
b0 1
b0 D
b0 f
b0 ;
b0 F
0"
#25
b10100 S
b1010 T
b1000 U
b1001 Z
b101 3
b101 5
b101 E
b101 G
b101 J
b101 M
b101 P
b101 V
b1001 4
b1001 6
b1001 H
b1001 K
b1001 N
b1001 Q
b1001 W
bx d
b1001 /
b1001 s
b101 0
b101 r
#26
bx d
#27
bx d
0'
b1110 1
b1110 D
b1110 f
b1110 7
b1110 I
#28
bx d
b10 %
1"
#29
bx d
b1100 !
b1100 -
b1100 _
b1100 b
b1110 k
#30
b10000 .
b10000 ^
b10000 e
bx d
b10000 c
#31
b0 g
b0 h
b110 i
b0 a
b1 [
bx d
b110000000000000000000000001 #
b110000000000000000000000001 &
#32
b0 1
b0 D
b0 f
0A
1?
b0 2
b0 C
b0 \
bx d
0"
#33
b1000 U
b0 T
b0 S
b1110 Z
b0 3
b0 5
b0 E
b0 G
b0 J
b0 M
b0 P
b0 V
b1110 4
b1110 6
b1110 H
b1110 K
b1110 N
b1110 Q
b1110 W
bx d
b1110 /
b1110 s
b0 0
b0 r
b101 1
b101 D
b101 f
b101 ;
b101 F
#34
bx d
1'
b0 1
b0 D
b0 f
b0 ;
b0 F
b0 7
b0 I
#35
bx d
#36
bx d
b11 %
1"
#37
bx d
b10000 !
b10000 -
b10000 _
b10000 b
#38
b10100 .
b10100 ^
b10100 e
bx d
b10100 c
#39
b110 S
b10 T
b1000 U
b1110 Z
b1 3
b1 5
b1 E
b1 G
b1 J
b1 M
b1 P
b1 V
1)
b1 g
b1 i
b1 a
b0 [
bx d
b1000000000000000100000000 #
b1000000000000000100000000 &
#40
bx d
b1 1
b1 D
b1 f
b1 ;
b1 F
0"
#41
b1000 U
b10 T
b0 S
b0 Z
b0 4
b0 6
b0 H
b0 K
b0 N
b0 Q
b0 W
bx d
b0 /
b0 s
#42
bx d
#43
bx d
#44
bx d
b100 %
1"
#45
bx d
b10100 !
b10100 -
b10100 _
b10100 b
b1 p
#46
b11000 .
b11000 ^
b11000 e
bx d
b11000 c
#47
b0 3
b0 5
b0 E
b0 G
b0 J
b0 M
b0 P
b0 V
0)
b0 S
b1000 U
b0 T
b1 Z
b10 g
b10 h
b10 a
b10 [
b1 4
b1 6
b1 H
b1 K
b1 N
b1 Q
b1 W
bx d
b1000000100000001000000010 #
b1000000100000001000000010 &
b1 /
b1 s
#48
1A
0?
b1 2
b1 C
b1 \
bx d
b0 1
b0 D
b0 f
b0 ;
b0 F
0"
#49
b10010 S
b10010 T
b1000 U
b1 Z
b1001 3
b1001 5
b1001 E
b1001 G
b1001 J
b1001 M
b1001 P
b1001 V
bx d
b1001 0
b1001 r
#50
bx d
#51
bx d
0'
b1010 1
b1010 D
b1010 f
b1010 7
b1010 I
#52
bx d
b101 %
1"
#53
bx d
b11000 !
b11000 -
b11000 _
b11000 b
b1010 o
#54
b11100 .
b11100 ^
b11100 e
bx d
b11100 c
#55
bx .
bx ^
bx e
x,
x)
x(
x*
bx +
bx ]
bx `
b1000 U
b10100 T
b10100 S
b1 Z
bx g
bx h
bx i
bx a
bx [
b1010 3
b1010 5
b1010 E
b1010 G
b1010 J
b1010 M
b1010 P
b1010 V
bx d
bx #
bx &
b1010 0
b1010 r
#56
b1 Z
b0x0x00 8
b0x0x00 X
b0x0x00 :
b0x0x00 R
b1000 U
b10100 T
b10100 S
b0 1
b0 D
b0 f
x<
x>
x=
x@
xA
x?
bx 2
bx C
bx \
bx d
0"
#57
b0 :
b0 R
b1000 U
b0xxxxxxxx0 T
b0 S
b0 Z
xY
bx 8
bx X
bx 3
bx 5
bx E
bx G
bx J
bx M
bx P
bx V
bx 4
bx 6
bx H
bx K
bx N
bx Q
bx W
bx d
bx /
bx s
bx 0
bx r
b0x0xx 9
b0x0xx O
b0x0x0 ;
b0x0x0 F
#58
bx d
bx B
bx L
bx 9
bx O
bx ;
bx F
#59
bx d
x'
bx 7
bx I
#60
bx d
1"
#61
bx d
bx !
bx -
bx _
bx b
#62
bx d
bx c
