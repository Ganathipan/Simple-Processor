$date
	Wed Jun 18 01:38:02 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' ZERO_FLAG $end
$var wire 1 ( SIGN_CONTROL $end
$var wire 1 ) REG_WRITE_ENABLE $end
$var wire 32 * PC_OUT [31:0] $end
$var wire 32 + PC_IN [31:0] $end
$var wire 1 , OPERAND_CONTROL $end
$var wire 8 - OPERAND2 [7:0] $end
$var wire 8 . OPERAND1 [7:0] $end
$var wire 1 / JUMP_CONTROL $end
$var wire 2 0 BRANCH_CONTROL [1:0] $end
$var wire 8 1 ALURESULT [7:0] $end
$var wire 3 2 ALUOP [2:0] $end
$var reg 8 3 ALU_IN_DATA1 [7:0] $end
$var reg 8 4 ALU_IN_DATA2 [7:0] $end
$scope module u_alu $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 sum [7:0] $end
$var wire 8 8 shiftOut [7:0] $end
$var wire 8 9 orOut [7:0] $end
$var wire 8 : mulOut [7:0] $end
$var wire 8 ; fwdOut [7:0] $end
$var wire 8 < andOut [7:0] $end
$var wire 3 = ALUOP [2:0] $end
$var reg 8 > RESULT [7:0] $end
$var reg 1 ' ZERO $end
$scope module u0 $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ RESULT [7:0] $end
$upscope $end
$scope module u1 $end
$var wire 8 A DATA1 [7:0] $end
$var wire 8 B DATA2 [7:0] $end
$var wire 8 C RESULT [7:0] $end
$upscope $end
$scope module u3 $end
$var wire 8 D DATA1 [7:0] $end
$var wire 8 E DATA2 [7:0] $end
$var wire 8 F RESULT [7:0] $end
$upscope $end
$scope module u4 $end
$var wire 8 G DATA1 [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 8 I RESULT [7:0] $end
$upscope $end
$scope module u5 $end
$var wire 8 J DATA1 [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$var reg 16 L A [15:0] $end
$var reg 17 M P [16:0] $end
$var reg 8 N RESULT [7:0] $end
$var reg 16 O S [15:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module u6 $end
$var wire 8 Q DATA1 [7:0] $end
$var wire 8 R DATA2 [7:0] $end
$var reg 8 S RESULT [7:0] $end
$var reg 1 T sign $end
$var integer 32 U i [31:0] $end
$upscope $end
$upscope $end
$scope module u_control $end
$var wire 8 V OPCODE [7:0] $end
$var reg 3 W ALUOP [2:0] $end
$var reg 2 X BRANCH_CONTROL [1:0] $end
$var reg 1 / JUMP_CONTROL $end
$var reg 1 , OPERAND_CONTROL $end
$var reg 1 ( SIGN_CONTROL $end
$var reg 1 ) WRITE_ENABLE $end
$upscope $end
$scope module u_pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var wire 32 Y PC_IN [31:0] $end
$var reg 32 Z PC_OUT [31:0] $end
$upscope $end
$scope module u_pcIn $end
$var wire 2 [ BRANCH [1:0] $end
$var wire 8 \ BRANCH_ADDRESS [7:0] $end
$var wire 1 / JUMP $end
$var wire 32 ] PC_IN [31:0] $end
$var wire 1 ' ZERO $end
$var reg 32 ^ PC [31:0] $end
$var reg 32 _ PC_OUT [31:0] $end
$var reg 32 ` offset [31:0] $end
$upscope $end
$scope module u_regfile $end
$var wire 1 " CLK $end
$var wire 3 a INADDRESS [2:0] $end
$var wire 8 b INDATA [7:0] $end
$var wire 3 c OUT1ADDRESS [2:0] $end
$var wire 3 d OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ) WRITE $end
$var wire 8 e r0 [7:0] $end
$var wire 8 f r1 [7:0] $end
$var wire 8 g r2 [7:0] $end
$var wire 8 h r3 [7:0] $end
$var wire 8 i r4 [7:0] $end
$var wire 8 j r5 [7:0] $end
$var wire 8 k r6 [7:0] $end
$var wire 8 l r7 [7:0] $end
$var reg 8 m OUT1DATA [7:0] $end
$var reg 8 n OUT2DATA [7:0] $end
$var integer 32 o counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
xT
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
bx .
bx -
x,
bx +
bx *
x)
x(
x'
bx &
bx %
1$
bx #
0"
bx !
$end
#1
bx00 `
b0 !
b0 *
b0 Z
b0 ]
#2
bx00 +
bx00 Y
bx00 _
b100 ^
#3
b0 1
b0 >
b0 b
b1000 P
bx M
bx00000000 O
bx00000000 L
bx00000 8
bx00000 S
b101 U
b101 4
b101 6
b101 ?
b101 B
b101 E
b101 H
b101 K
b101 R
1)
1,
0(
0/
b0 0
b0 X
b0 [
b100 +
b100 Y
b100 _
b100 \
b0 V
b100 a
b0 c
b101 d
b10000 `
b101000000000000010000000000 #
b101000000000000010000000000 &
#4
b101 1
b101 >
b101 b
b0 2
b0 =
b0 W
b10000 `
b1000 o
b0x0x <
b0x0x F
bx1x1 9
bx1x1 I
b101 ;
b101 @
1"
#5
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b10000 `
#6
b10000 `
#7
b1000 P
b0 M
b0 O
b0 L
b101 U
0T
b0 8
b0 S
b0 3
b0 5
b0 A
b0 D
b0 G
b0 J
b0 Q
b0 -
b0 n
b0 .
b0 m
b10000 `
#8
b10000 `
b0 <
b0 F
b101 9
b101 I
0"
#9
b10000 `
0'
b101 7
b101 C
#10
b10000 `
b0 :
b0 N
#11
b10000 `
#12
b10000 `
b0 %
0$
1"
#13
b100 !
b100 *
b100 Z
b100 ]
b101 i
b10000 `
#14
b1000 +
b1000 Y
b1000 _
b1000 ^
b10000 `
#15
b1000 P
b0 M
b1001 U
b1001 4
b1001 6
b1001 ?
b1001 B
b1001 E
b1001 H
b1001 K
b1001 R
b10 \
b10 a
b1 d
b1001000000000000001000000000 #
b1001000000000000001000000000 &
b1000 `
#16
b1000 `
b1001 1
b1001 >
b1001 b
b1001 9
b1001 I
b1001 ;
b1001 @
0"
#17
b1000 `
b1001 7
b1001 C
#18
b1000 `
#19
b1000 `
#20
b1000 `
b1 %
1"
#21
b1000 !
b1000 *
b1000 Z
b1000 ]
b1001 g
b1000 `
#22
b1100 +
b1100 Y
b1100 _
b1100 ^
b1000 `
#23
b1000 P
b0 M
b10 U
0,
b0 4
b0 6
b0 ?
b0 B
b0 E
b0 H
b0 K
b0 R
b110 \
b10 V
b110 a
b100 c
b10 d
b10000001000000011000000010 #
b10000001000000011000000010 &
b11000 `
#24
b1 2
b1 =
b1 W
b11000 `
b1001 1
b1001 >
b1001 b
b0 9
b0 I
b0 ;
b0 @
0"
#25
b1001 4
b1001 6
b1001 ?
b1001 B
b1001 E
b1001 H
b1001 K
b1001 R
b101 3
b101 5
b101 A
b101 D
b101 G
b101 J
b101 Q
b1001 -
b1001 n
b101 .
b101 m
b11000 `
1'
b0 1
b0 >
b0 b
b0 7
b0 C
#26
b11000 `
b1 <
b1 F
b1101 9
b1101 I
b1001 ;
b1001 @
#27
b11000 `
0'
b1110 1
b1110 >
b1110 b
b1110 7
b1110 C
#28
b11000 `
b10 %
1"
#29
b1100 !
b1100 *
b1100 Z
b1100 ]
b1110 k
b11000 `
#30
b10000 +
b10000 Y
b10000 _
b10000 ^
b11000 `
#31
b0 \
b1 V
b0 a
b0 c
b110 d
b110000000000000000000000001 #
b110000000000000000000000001 &
b0 `
#32
b1001 1
b1001 >
b1001 b
b0 2
b0 =
b0 W
b0 `
0"
#33
b1000 P
b0 M
b1110 U
b1110 4
b1110 6
b1110 ?
b1110 B
b1110 E
b1110 H
b1110 K
b1110 R
b0 3
b0 5
b0 A
b0 D
b0 G
b0 J
b0 Q
b1110 -
b1110 n
b0 .
b0 m
b0 `
#34
b0 `
b1110 1
b1110 >
b1110 b
b0 <
b0 F
b1110 9
b1110 I
b1110 ;
b1110 @
#35
b0 `
#36
b0 `
b11 %
1"
#37
b10000 !
b10000 *
b10000 Z
b10000 ]
b1110 e
b0 `
#38
b10100 +
b10100 Y
b10100 _
b10100 ^
b0 `
#39
b1 4
b1 6
b1 ?
b1 B
b1 E
b1 H
b1 K
b1 R
1,
b1000 P
b110001000 M
b1111001000000000 O
b111000000000 L
b1110 U
b0 8
b0 S
b1 \
b0 V
b1 a
b1 d
b1110 3
b1110 5
b1110 A
b1110 D
b1110 G
b1110 J
b1110 Q
b1000000000000000100000000 #
b1000000000000000100000000 &
b1110 .
b1110 m
b100 `
#40
b100 `
b1 1
b1 >
b1 b
b1111 9
b1111 I
b1 ;
b1 @
0"
#41
b0 -
b0 n
b100 `
b1111 7
b1111 C
#42
b100 `
b11000100 :
b11000100 N
#43
b100 `
#44
b100 `
b100 %
1"
#45
b10100 !
b10100 *
b10100 Z
b10100 ]
b1 f
b100 `
#46
b11000 +
b11000 Y
b11000 _
b11000 ^
b100 `
#47
0,
b10 \
b10 V
b10 a
b10 c
b1000000100000001000000010 #
b1000000100000001000000010 &
b1 -
b1 n
b1000 `
#48
b1111 1
b1111 >
b1111 b
b1 2
b1 =
b1 W
b1000 `
0"
#49
b1000 P
b10010 M
b1111011100000000 O
b100100000000 L
b1 U
b10010 8
b10010 S
b1001 3
b1001 5
b1001 A
b1001 D
b1001 G
b1001 J
b1001 Q
b1001 .
b1001 m
b1000 `
#50
b1000 `
b1 <
b1 F
b1001 9
b1001 I
#51
b1000 `
b1010 1
b1010 >
b1010 b
b1010 7
b1010 C
#52
b1000 `
b101 %
b1001 :
b1001 N
1"
#53
b11000 !
b11000 *
b11000 Z
b11000 ]
b1010 g
b1000 `
#54
b11100 +
b11100 Y
b11100 _
b11100 ^
b1000 `
#55
bx00 +
bx00 Y
bx00 _
x)
x,
x(
x/
bx 0
bx X
bx [
b1000 P
b10100 M
b1111011000000000 O
b101000000000 L
b1 U
b10100 8
b10100 S
bx \
bx V
bx a
bx c
bx d
b1010 3
b1010 5
b1010 A
b1010 D
b1010 G
b1010 J
b1010 Q
bx #
bx &
b1010 .
b1010 m
bx00 `
#56
b0 1
b0 >
b0 b
bx00 +
bx00 Y
bx00 _
bx 2
bx =
bx W
bx00 `
b0 <
b0 F
b1011 9
b1011 I
0"
#57
bx 4
bx 6
bx ?
bx B
bx E
bx H
bx K
bx R
bx 3
bx 5
bx A
bx D
bx G
bx J
bx Q
bx00 +
bx00 Y
bx00 _
bx -
bx n
bx .
bx m
bx00 `
b1011 7
b1011 C
#58
bx00 +
bx00 Y
bx00 _
bx00 `
bx <
bx F
bx 9
bx I
bx ;
bx @
b1010 :
b1010 N
#59
bx00 `
x'
bx 7
bx C
#60
bx00 +
bx00 Y
bx00 _
bx00 `
1"
#61
bx00 +
bx00 Y
bx00 _
bx00 !
bx00 *
bx00 Z
bx00 ]
bx00 `
#62
bx +
bx Y
bx _
bx ^
bx00 `
